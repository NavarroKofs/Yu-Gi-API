swagger: "2.0"
info:
  description: "Yu-Gi-Api! es una interfaz de programación de aplicaciones qu busca ayudar a las personas que necesiten comprar o vender cartas del juego de cartas coleccionables Yu-Gi-Oh! mediante una lista de precios actuales de dichas cartas en el mercado así como un gestor de cartas y otras funcionalidades."
  version: "1.0.0"
  title: "Yu-Gi-API!"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "yu-gi-api.herokuapp.com"
basePath: "/v1"
tags:
- name: "Yu-Gi-API!"
  description: "El mundo de Yu-Gi-Oh! en una sola aplicación"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/NavarroKofs/Yu-Gi-API"
- name: "decklist"
  description: "Operations related to customized decklist management"
- name: "cards"
  description: "Returns the card information"
paths:
  /decklist:
    post:
      tags:
      - "decklist"
      summary: "Creates a new customized decklist"
      description: ""
      operationId: "createDecklist"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "request"
        description: "Information of the new Decklist"
        required: true
        schema:
          $ref: "#/definitions/CreateDecklist"
      responses:
        201:
          description: "Created succesfuly"
          schema:
            $ref: "#/definitions/Decklist"
        422:
          description: "Unprocessable entity"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "decklist"
      summary: "Deletes an existing decklist"
      description: ""
      operationId: "deleteDecklist"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "request"
        description: "Name of the decklist to delete"
        required: true
        schema:
          $ref: "#/definitions/DeleteDecklist"
      responses:
        204:
          description: "Decklist successfuly removed"
        404:
          description: "Decklist not found"
          schema:
            $ref: "#/definitions/Error"
  /decklist/{name}:
    get:
      tags:
      - "decklist"
      summary: "Finds decklist by status"
      description: ""
      operationId: "findDeckByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the deck to find"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/Decklist"
        404:
          description: "Decklist not found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "decklist"
      summary: "Adds new card to a deck"
      description: ""
      operationId: "addCards"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the deck to modify"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        description: "List of cards to add"
        required: true
        schema:
          $ref: "#/definitions/AddCard"
      responses:
        200:
          description: "Card added successfuly"
          schema:
            $ref: "#/definitions/Decklist"
        422:
          description: "Unprocessable entity"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "decklist"
      summary: "Deletes a card to a deck"
      description: ""
      operationId: "deleteCards"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the deck to modify"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        description: "Name of the card to delete"
        required: true
        schema:
          $ref: "#/definitions/DeleteCard"
      responses:
        200:
          description: "Card deleted successfuly"
          schema:
            $ref: "#/definitions/Decklist"
        404:
          description: "Decklist not found"
          schema:
            $ref: "#/definitions/Error"
  /wishlist:
    post:
      tags:
      - "WishList"
      summary: "Creates a new customized WishList"
      description: ""
      operationId: "newWishlist"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "request"
        description: "Information of the new WishList"
        required: true
        schema:
          $ref: "#/definitions/DataCreateWishList"
      responses:
        201:
          description: "Created succesfuly"
          schema:
            $ref: "#/definitions/WishList"
        423:
          description: "Unprocessable entity"
          schema:
            $ref: "#/definitions/Error"
  /wishlist/{id}:
    get:
      tags:
      - "WishList"
      summary: "Finds WishList by id"
      description: ""
      operationId: "findWishListByName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the wishlist to find"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/WishList"
        404:
          description: "WishList not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "WishList"
      summary: "change cards from a WishList by id"
      description: ""
      operationId: "addCard"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the wishlist to find"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        description: "Information of the cards to add"
        required: true
        schema:
          $ref: "#/definitions/cardsArray"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/WishList"
        404:
          description: "WishList not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "WishList"
      summary: "Deletes a WishList"
      description: ""
      operationId: "deleteWL"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the WishList to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "WishList deleted successfuly"
          schema:
            $ref: "#/definitions/WishList"
        404:
          description: "WishList not found"
          schema:
            $ref: "#/definitions/Error"        
  /wishlist/tPrice/{id}:
    get:
      tags:
      - "WishList"
      summary: "Get total price of a WishList by id"
      description: ""
      operationId: "wishListTotalPrice"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the wishlist to find"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/WishList"
        404:
          description: "WishList not found"
          schema:
            $ref: "#/definitions/Error"
  /wishlist/fCard/{id}/{name}:
    get:  
      tags:
      - "WishList"
      summary: "Get a card inside of a WishList, by id"
      description: ""
      operationId: "findCard"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the wishlist to find"
        required: true
        type: "number"
      - name: "name"
        in: "path"
        description: "Name of the card to find"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/WishList"
        404:
          description: "WishList not found"
          schema:
            $ref: "#/definitions/Error"  
  /v1/wishlist/rCard/{id}/{name}:
    delete:  
      tags:
      - "WishList"
      summary: "Delete a card inside of a WishList, by id"
      description: ""
      operationId: "removeCard"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the wishlist to find"
        required: true
        type: "number"
      - name: "name"
        in: "path"
        description: "Name of the card to find"
        required: true
        type: "number"
      responses:
        200:
          description: "successful operation"
          schema:
              $ref: "#/definitions/WishList"
        404:
          description: "WishList not found"
          schema:
            $ref: "#/definitions/Error" 
  /cards:
    get:
      tags:
      - "cards"
      summary: "Show all Yu-Gi-Oh! cards"
      description: "Show all Yu-Gi-Oh! cards"
      operationId: "showAllCards"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful Operation"
          schema:
              $ref: "#/definitions/ShowAllCards"
        503:
          description: "Service Unavailable"
          schema:
            $ref: '#/definitions/servicioNoDisponible'
  /cards/{name}:
    get:
      tags:
      - "cards"
      summary: "Show all information about a card"
      description: "Show all information about a card.  The price is in mexican pesos. You only need to introduce 'name' as parameter in the path. Name recquire the exact name of the card or the card ID."
      operationId: "showACard"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the card to search"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
              $ref: '#/definitions/cardStructure'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/notFound'
        503:
          description: "Service Unavailable"
          schema:
            $ref: '#/definitions/servicioNoDisponible'
        422:
          description: "Unprocessable Entity"
          schema:
            $ref: '#/definitions/unprocessableEntity'
  /cards/search?fname={word}:
    get:
      tags:
      - "cards"
      summary: "Show all information about cards"
      description: "Show all information about cards.  The price is in mexican pesos. You only need to introduce 'fname' as parameter in the path. A fuzzy search using a string. For example fname=Magician to search by all cards with 'Magician' in the name."
      operationId: "showSimilarCards"
      produces:
      - "application/json"
      parameters:
      - name: "word"
        in: "path"
        description: "Word of a card to search"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
              $ref: '#/definitions/ShowAllCards'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/notFound'
        503:
          description: "Service Unavailable"
          schema:
            $ref: '#/definitions/servicioNoDisponible'
        422:
          description: "Unprocessable Entity"
          schema:
            $ref: '#/definitions/unprocessableEntity'
  /cards/archetype/{archetype_name}:
    get:
      tags:
      - "cards"
      summary: "Show all information about an archetype"
      description: "Show all information about an archetype. The price is in mexican pesos. Filter the cards by archetype (Prank-Kids, Blue-Eyes, etc)."
      operationId: "showCardsArchetype"
      produces:
      - "application/json"
      parameters:
      - name: "archetype_name"
        in: "path"
        description: "Name of a Yu-Gi-Oh! archetype"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
              $ref: '#/definitions/ShowAllCards'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/notFound'
        503:
          description: "Service Unavailable"
          schema:
            $ref: '#/definitions/servicioNoDisponible'
  /cards/set/{set_name}:
    get:
      tags:
      - "cards"
      summary: "Show all information about an archetype"
      description: "Show all information about an archetype. The price is in mexican pesos. Filter the cards by archetype (Prank-Kids, Blue-Eyes, etc)."
      operationId: "showCardsSet"
      produces:
      - "application/json"
      parameters:
      - name: "set_name"
        in: "path"
        description: "Name of a Yu-Gi-Oh! archetype"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
              $ref: '#/definitions/ShowAllCards'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/notFound'
        503:
          description: "Service Unavailable"
          schema:
            $ref: '#/definitions/servicioNoDisponible'
  /cards/banlist/{ruling_type}:
    get:
      tags:
      - "cards"
      summary: "Show all information about an archetype"
      description: "Show all information about an archetype. The price is in mexican pesos. Filter the cards by archetype (Prank-Kids, Blue-Eyes, etc)."
      operationId: "showRuling"
      produces:
      - "application/json"
      parameters:
      - name: "ruling_type"
        in: "path"
        description: "Name of a Yu-Gi-Oh! archetype"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
              $ref: '#/definitions/ruling'
        404:
          description: "Not Found"
          schema:
            $ref: '#/definitions/notFound'
        503:
          description: "Service Unavailable"
          schema:
            $ref: '#/definitions/servicioNoDisponible'
definitions:
  cardsArray:
    type: "object"
    properties:
      name:
         type: "string"
         example: "Ghostrick lantern"
      amount:
        type: "integer"
        format: "int64"
        example: 3
    xml:
      name: "Tag"
  Cards:
    type: "array"
    xml:
      name: "cards"
      wrapped: true
    items:
      $ref: "#/definitions/cardsArray"
  DataCreateDecklist:
    type: "object"
    required:
    - "name"
    - "cards"
    properties:
      name:
        type: "string"
        example: "Ghostrick"
      cards:
        $ref: "#/definitions/Cards"
  DataCreateWishList:
    type: "object"
    required:
    - "name"
    - "cards"
    properties:
      name:
        type: "string"
        example: "Ghostrick"
      cards:
        $ref: "#/definitions/Cards"
      price:
        type: "number"
  DataDecklist:
    type: "object"
    required:
    - "name"
    - "cards"
    properties:
      name:
        type: "string"
        example: "Ghostrick"
      cards:
        $ref: "#/definitions/Cards"
      Size:
        type: "integer"
        format: "int64"
        example: 3
      Legality:
        type: "boolean"
        example: false
  dataWishList:
    type: "object"
    required:
    - "name"
    - "cards"
    properties:
      name:
        type: "string"
        example: "Ghostrick"
      cards:
        $ref: "#/definitions/Cards"
      Size:
        type: "integer"
        format: "int64"
        example: 3
      price:
        type: "number"
  CreateDecklist:
    type: "object"
    required:
    - "data"
    properties:
      data:
        $ref: "#/definitions/DataCreateDecklist"
    xml:
      name: "Decklist"
  Decklist:
    type: "object"
    required:
    - "data"
    properties:
      data:
        $ref: "#/definitions/DataDecklist"
    xml:
      name: "Decklist"
  WishList:
    type: "object"
    required:
    - "data"
    properties:
      data:
        $ref: "#/definitions/dataWishList"
    xml:
      name: "WishList"
  DataDeleteDecklist:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Ghostrick"
  DeleteDecklist:
    type: "object"
    required:
    - "data"
    properties:
      data:
        $ref: "#/definitions/DataDeleteDecklist"
    xml:
      name: "DeleteDecklist"
  DataAddCard:
    type: "array"
    xml:
      name: "cards"
      wrapped: true
    items:
      $ref: "#/definitions/cardsArray"
  AddCard:
    type: "object"
    required:
    - "data"
    properties:
      data:
        $ref: "#/definitions/DataAddCard"
    xml:
      name: "AddCard"
  DataDeleteCard:
    type: "object"
    required:
    - "card"
    properties:
      name:
        type: "string"
        example: "Ghostrick lantern"
  DeleteCard:
    type: "object"
    required:
    - "data"
    properties:
      data:
        $ref: "#/definitions/DataDeleteCard"
    xml:
      name: "DeleteCard"
  ErrorData:
    type: "object"
    required:
    - "code"
    - "description"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: 422
      description:
        type: "string"
        example: "Deck name already taken"
    xml:
      name: "Decklist"
  Error:
    type: "object"
    required:
    - "error"
    properties:
      error:
        $ref: "#/definitions/ErrorData"
    xml:
      name: "Decklist"
  ShowAllCards:
    type: "object"
    required:
    - "current_page"
    - "data"
    properties:
      current_page:
        type: "integer"
        example: 1
      data:
        type: "array"
        items:
          $ref: "#/definitions/cardStructure"
      first_page_url:
        type: "string"
        example: "https://yu-gi-api.herokuapp.com/v1/cartas?page=1"
      from:
        type: "string"
        example: 1
      last_page:
        type: "string"
        example: 687
      last_page_url:
        type: "string"
        example: "https://yu-gi-api.herokuapp.com/v1/cartas?page=687"
      next_page_url:
        type: "string"
        example: "https://yu-gi-api.herokuapp.com/v1/cartas?page=2"
      path: 
        type: "string"
        example:  "https://yu-gi-api.herokuapp.com/v1/cartas"
      per_page:
        type: "string"
        example: 15
      prev_page_url:
        type: "string"
        example: null
      to:
        type: "string"
        example: 15
      total:
        type: "string"
        example: 10302
  cardStructure:
    type: "object"
    properties:
      id:
        type: "string"
        example: 34541863
      name:
        type: "string"
        example: "\"A\" Cell Breeding Device"
      type: 
        type: "string"
        example: "Spell Card"
      desc: 
        type: "string"
        example: "During each of your Standby Phases, put 1 A-Counter on 1 face-up monster your opponent controls."
      race: 
        type: "string"
        example: "Continuous"
      archetype: 
        type: "string"
        example: "Alien"
      card_Sets:
        $ref: '#/definitions/dataCardSets'
      card_images:
        $ref: '#/definitions/dataCardImages'
      card_prices:
        $ref: '#/definitions/dataCardPrices'
  dataCardSets:
    type: "object"
    properties:
      set_name:
        type: "string"
        example: "Force of the Breaker"
      set_code:
        type: "string"
        example: "FOTB-EN043"
      set_rarity:
        type: "string"
        example: "Common"
      set_price:
        type: "string"
        example: "$20.78 MXN"
  dataCardImages:
    type: "object"
    properties:
      id:
        type: "string"
        example: "34541863"
      image_url:
        type: "string"
        example: "https://storage.googleapis.com/ygoprodeck.com/pics/34541863.jpg"
      image_url_small:
        type: "string"
        example: "https://storage.googleapis.com/ygoprodeck.com/pics_small/34541863.jpg"
  dataCardPrices:
    type: "object"
    properties:
      cardmarket_price:
        type: "string"
        example: "0.06"
      tcgplayer_price:
        type: "string"
        example: "0.22"
      ebay_price:
        type: "string"
        example: "0.99"
      amazon_price:
        type: "string"
        example: "0.05"
  servicioNoDisponible:
    required:
    - "error"
    type: "object"
    properties:
      error:
        $ref: '#/definitions/Error503'
  Error503:
    type: "object"
    required:
    - "code"
    - "description"
    properties:
      code:
        type: "string"
        example: "ERROR-3"
      title:
        type: "string"
        example: "Service Unavailable"
      description:
        type: "string"
        example: "The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay."
  notFound:
    required:
    - "error"
    type: "object"
    properties:
      error:
        $ref: '#/definitions/Error404'
  Error404:
    type: "object"
    required:
    - "code"
    - "description"
    properties:
      code:
        type: "string"
        example: "ERROR-2"
      title:
        type: "string"
        example: "Not Found"
      description:
        type: "string"
        example: "No card matching your query was found in the database."
  unprocessableEntity:
    required:
    - "error"
    type: "object"
    properties:
      error:
        $ref: '#/definitions/Error422'
  Error422:
    type: "object"
    required:
    - "code"
    - "description"
    properties:
      code:
        type: "string"
        example: "ERROR-1"
      title:
        type: "string"
        example: "Unprocessable Entity"
      description:
        type: "string"
        example: "expected 'name' or 'fname' as argument"
  ruling:
    type: "object"
    required:
    - "current_page"
    - "data"
    properties:
      current_page:
        type: "integer"
        example: 1
      data:
        type: "array"
        items:
          $ref: "#/definitions/banlistStructure"
      first_page_url:
        type: "string"
        example: "https://yu-gi-api.herokuapp.com/v1/banlist/TCG?page=1"
      from:
        type: "string"
        example: 1
      last_page:
        type: "string"
        example: 687
      last_page_url:
        type: "string"
        example: "https://yu-gi-api.herokuapp.com/v1/banlist/TCG?page=13"
      next_page_url:
        type: "string"
        example: "https://yu-gi-api.herokuapp.com/v1/banlist/TCG?page=2"
      path: 
        type: "string"
        example:  "https://yu-gi-api.herokuapp.com/v1/banlist/TCG"
      per_page:
        type: "string"
        example: 15
      prev_page_url:
        type: "string"
        example: null
      to:
        type: "string"
        example: 15
      total:
        type: "string"
        example: 181
  banlistStructure:
    type: "object"
    properties:
      id:
        type: "string"
        example: 34541863
      name:
        type: "string"
        example: "A Hero Lives"
      type: 
        type: "string"
        example: "Spell Card"
      desc: 
        type: "string"
        example: "If you control no face-up monsters: Pay half your LP; Special Summon 1 Level 4 or lower \"Elemental HERO\" monster from your Deck."
      race: 
        type: "string"
        example: "Normal"
      archetype: 
        type: "string"
        example: "Elemental HERO"
      card_Sets:
        $ref: '#/definitions/dataCardSets'
      banlist_info:
        $ref: '#/definitions/dataBanlistInfo'
      card_images:
        $ref: '#/definitions/dataCardImages'
      card_prices:
        $ref: '#/definitions/dataCardPrices'
  dataBanlistInfo:
    type: "object"
    properties:
      ban_tcg:
        type: "string"
        example: "Limited"
      ban_ocg:
        type: "string"
        example: "Semi-Limited"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"